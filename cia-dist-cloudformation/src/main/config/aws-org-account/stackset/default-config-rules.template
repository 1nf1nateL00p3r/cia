{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Resources": {
        "CustomConfigRuleAJKyx": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "cloudtrail_cloudwatch_integrated", 
                "Description": "A config rule that ensures CloudTrail is enabled in all regions, ensure CloudTrail trails are integrated with CloudWatch Logs .", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::CloudTrail::Trail"
                    ]
                }, 
                "Source": {
                    "Owner": "CUSTOM_LAMBDA", 
                    "SourceIdentifier": {
                        "Fn::GetAtt": [
                            "LambdaFunctionAJKyx", 
                            "Arn"
                        ]
                    }, 
                    "SourceDetails": [
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "ConfigurationItemChangeNotification"
                        }, 
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "OversizedConfigurationItemChangeNotification"
                        }
                    ]
                }
            }, 
            "DependsOn": "LambdaInvokePermissionsAJKyx"
        }, 
        "LambdaInvokePermissionsAJKyx": {
            "Type": "AWS::Lambda::Permission", 
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunctionAJKyx", 
                        "Arn"
                    ]
                }, 
                "Action": "lambda:InvokeFunction", 
                "Principal": "config.amazonaws.com"
            }
        }, 
        "LambdaFunctionAJKyx": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "FunctionName": "LambdaForcloudtrail_cloudwatch_integrated", 
                "Handler": "index.lambda_handler", 
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIamRoleAJKyx", 
                        "Arn"
                    ]
                }, 
                "Runtime": "python2.7", 
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n", 
                            [
                                "", 
                                "#==================================================================================================", 
                                "# Function: EvaluateCloudTrailEnabledIntegrated", 
                                "#==================================================================================================", 
                                "import json", 
                                "import boto3", 
                                "import datetime", 
                                "import time", 
                                "client = boto3.client('cloudtrail')", 
                                "def lambda_handler(event, context):", 
                                "  is_compliant = True", 
                                "  annotation = ''", 
                                "  is_multi_region = True", 
                                "  is_publicly_accessible = False", 
                                "  current_region_trail = {}", 
                                "  # List all trails, including 'shadow' trails, which are trails in", 
                                "  # other regions that could be capturing multi-regional events", 
                                "  for trail in client.describe_trails()['trailList']:", 
                                "    if trail['HomeRegion'] == context.invoked_function_arn.split(':')[3]:", 
                                "      current_region_trail = trail", 
                                "      annotation = ''", 
                                "      is_compliant= True", 
                                "      is_multi_region = current_region_trail['IsMultiRegionTrail']", 
                                "      # Enabled in all regions?", 
                                "      if not is_multi_region:", 
                                "        is_compliant = False", 
                                "        annotation = annotation + ' CloudTrail is not enabled in all regions.'", 
                                "      # Integration with CloudWatch Logs?", 
                                "      if 'CloudWatchLogsLogGroupArn' in current_region_trail and not current_region_trail['CloudWatchLogsLogGroupArn']:", 
                                "        is_compliant = False", 
                                "        annotation = annotation + ' CloudTrail is not integrated with Cloudwatch Logs.'", 
                                "      # Check if Trail logging has been turned off", 
                                "      trail_details = client.get_trail_status(Name = current_region_trail['Name'])", 
                                "      if not trail_details['IsLogging']:", 
                                "        is_compliant = False", 
                                "        annotation = annotation + 'CloudTrail trail is not logging any AWS API calls.'", 
                                "      # CloudWatch Logs delivered within the last day", 
                                "      if 'LatestCloudWatchLogsDeliveryTime' in trail_details:", 
                                "        # Determine whether the number of minutes since the last delivery time exceeds 24 hours.", 
                                "        if ((int(time.time()) - int(trail_details['LatestCloudWatchLogsDeliveryTime'].strftime(\"%s\"))) / 1440) > 24:", 
                                "          is_compliant = False", 
                                "          annotation = annotation + ' The latest CloudTrail log delivery exceeds 24 hours.'", 
                                "      else:", 
                                "        is_compliant = False", 
                                "        annotation = annotation + ' There is no record of CloudTrail log delivery.'", 
                                "      # Set up evaluations", 
                                "      result_token = 'No token found.'", 
                                "      if 'resultToken' in event: result_token = event['resultToken']", 
                                "      evaluations = [", 
                                "        {", 
                                "          'ComplianceResourceType': 'AWS::CloudTrail::Trail',", 
                                "          'ComplianceResourceId': current_region_trail['Name'],", 
                                "          'ComplianceType': 'COMPLIANT' if is_compliant else 'NON_COMPLIANT',", 
                                "          'OrderingTimestamp': datetime.datetime.now()", 
                                "        }", 
                                "      ]", 
                                "      # Is compliant message", 
                                "      if is_compliant: annotation = 'CloudTrail is enabled in all regions and trails are integrated with CloudWatch Logs!'", 
                                "      if annotation: evaluations[0]['Annotation'] = annotation", 
                                "      config = boto3.client('config')", 
                                "      #deliver evaluations", 
                                "      config.put_evaluations(", 
                                "        Evaluations = evaluations,", 
                                "        ResultToken = result_token", 
                                "      )", 
                                ""
                            ]
                        ]
                    }
                }, 
                "Timeout": 300
            }, 
            "DependsOn": "LambdaIamRoleAJKyx"
        }, 
        "LambdaIamRoleAJKyx": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "RoleName": "IAMRoleForcloudtrail_cloudwatch_integrated", 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }, 
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }, 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess", 
                    "arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole", 
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ], 
                "Policies": []
            }
        }, 
        "CustomConfigRulePBuQE": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "cloudtrail_encryption_validation", 
                "Description": "A config rule that ensures CloudTrail log file validation is enabled and that CloudTrail logs are encrypted at rest using KMS CMKs.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::CloudTrail::Trail"
                    ]
                }, 
                "Source": {
                    "Owner": "CUSTOM_LAMBDA", 
                    "SourceIdentifier": {
                        "Fn::GetAtt": [
                            "LambdaFunctionPBuQE", 
                            "Arn"
                        ]
                    }, 
                    "SourceDetails": [
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "ConfigurationItemChangeNotification"
                        }, 
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "OversizedConfigurationItemChangeNotification"
                        }
                    ]
                }
            }, 
            "DependsOn": "LambdaInvokePermissionsPBuQE"
        }, 
        "LambdaInvokePermissionsPBuQE": {
            "Type": "AWS::Lambda::Permission", 
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunctionPBuQE", 
                        "Arn"
                    ]
                }, 
                "Action": "lambda:InvokeFunction", 
                "Principal": "config.amazonaws.com"
            }
        }, 
        "LambdaFunctionPBuQE": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "FunctionName": "LambdaForcloudtrail_encryption_validation", 
                "Handler": "index.lambda_handler", 
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIamRolePBuQE", 
                        "Arn"
                    ]
                }, 
                "Runtime": "python2.7", 
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n", 
                            [
                                "", 
                                "import json", 
                                "import boto3", 
                                "import datetime", 
                                "import time", 
                                "client_ct = boto3.client('cloudtrail')", 
                                "config = boto3.client('config')", 
                                "def lambda_handler(event, context):", 
                                "  for trail in client_ct.describe_trails()['trailList']:", 
                                "    is_compliant = True", 
                                "    if trail['HomeRegion'] == context.invoked_function_arn.split(':')[3]:", 
                                "      current_region_trail = trail", 
                                "      annotation = ''", 
                                "      # evaluate log file validation", 
                                "      if not current_region_trail['LogFileValidationEnabled']:", 
                                "        is_compliant = False", 
                                "        annotation = annotation + ' CloudTrail log file validation is not enabled.'", 
                                "      # evaluate log file encryption", 
                                "      if not 'KmsKeyId' in current_region_trail:", 
                                "        is_compliant = False", 
                                "        annotation = annotation + ' CloudTrail log files are not encrypted in S3.'", 
                                "      result_token = 'No token found.'", 
                                "      if 'resultToken' in event: result_token = event['resultToken']", 
                                "      evaluations = [", 
                                "        {", 
                                "          'ComplianceResourceType': 'AWS::CloudTrail::Trail',", 
                                "          'ComplianceResourceId': current_region_trail['Name'],", 
                                "          'ComplianceType': 'COMPLIANT' if is_compliant else 'NON_COMPLIANT',", 
                                "          'OrderingTimestamp': datetime.datetime.now()", 
                                "        }", 
                                "      ]", 
                                "      if is_compliant: annotation = 'CloudTrail log files are encrypted and validated in S3.'", 
                                "      if annotation: evaluations[0]['Annotation'] = annotation", 
                                "      config.put_evaluations(", 
                                "        Evaluations = evaluations,", 
                                "        ResultToken = result_token", 
                                "      )", 
                                ""
                            ]
                        ]
                    }
                }, 
                "Timeout": 300
            }, 
            "DependsOn": "LambdaIamRolePBuQE"
        }, 
        "LambdaIamRolePBuQE": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "RoleName": "IAMRoleForcloudtrail_encryption_validation", 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }, 
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }, 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess", 
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess", 
                    "arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole", 
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ], 
                "Policies": []
            }
        }, 
        "CustomConfigRulevxNTr": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "vpc_flow_logs_enabled", 
                "Description": "A Config rule that checks that VPC Flow Logs is enabled at specific VPC.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::EC2::VPC"
                    ]
                }, 
                "Source": {
                    "Owner": "CUSTOM_LAMBDA", 
                    "SourceIdentifier": {
                        "Fn::GetAtt": [
                            "LambdaFunctionvxNTr", 
                            "Arn"
                        ]
                    }, 
                    "SourceDetails": [
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "ConfigurationItemChangeNotification"
                        }, 
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "OversizedConfigurationItemChangeNotification"
                        }
                    ]
                }
            }, 
            "DependsOn": "LambdaInvokePermissionsvxNTr"
        }, 
        "LambdaInvokePermissionsvxNTr": {
            "Type": "AWS::Lambda::Permission", 
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunctionvxNTr", 
                        "Arn"
                    ]
                }, 
                "Action": "lambda:InvokeFunction", 
                "Principal": "config.amazonaws.com"
            }
        }, 
        "LambdaFunctionvxNTr": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "FunctionName": "LambdaForvpc_flow_logs_enabled", 
                "Handler": "index.lambda_handler", 
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIamRolevxNTr", 
                        "Arn"
                    ]
                }, 
                "Runtime": "python3.6", 
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n", 
                            [
                                "", 
                                "\t#", 
                                "# This file made available under CC0 1.0 Universal (https://creativecommons.org/publicdomain/zero/1.0/legalcode)", 
                                "#", 
                                "# Ensure VPC Flow Logs is enabled.", 
                                "# Description: Checks that VPC Flow Logs is enabled at specific VPC", 
                                "#", 
                                "# Trigger Type: Change Triggered", 
                                "# Scope of Changes: EC2:VPC", 
                                "# Required Resource Identifier: VPC ID", 
                                "# Example Value: vpc-xxxxxxxx", 
                                "", 
                                "import boto3", 
                                "import json", 
                                "", 
                                "def evaluate_compliance(config_item, vpc_id):", 
                                "    if (config_item['resourceType'] != 'AWS::EC2::VPC'):", 
                                "        return 'NOT_APPLICABLE'", 
                                "", 
                                "    elif is_flow_logs_enabled(vpc_id):", 
                                "        return 'COMPLIANT'", 
                                "    else:", 
                                "        return 'NON_COMPLIANT'", 
                                "", 
                                "def is_flow_logs_enabled(vpc_id):", 
                                "    ec2 = boto3.client('ec2')", 
                                "    response = ec2.describe_flow_logs(", 
                                "        Filter=[", 
                                "            {", 
                                "                'Name': 'resource-id',", 
                                "                'Values': [", 
                                "                    vpc_id,", 
                                "                ]", 
                                "            },", 
                                "        ],", 
                                "    )", 
                                "    if len(response[u'FlowLogs']) != 0: return True", 
                                "", 
                                "def lambda_handler(event, context):", 
                                "    invoking_event = json.loads(event['invokingEvent'])", 
                                "", 
                                "    compliance_value = 'NOT_APPLICABLE'", 
                                "", 
                                "    vpc_id = invoking_event['configurationItem']['resourceId']", 
                                "    compliance_value = evaluate_compliance(", 
                                "        invoking_event['configurationItem'], vpc_id)", 
                                "", 
                                "    config = boto3.client('config')", 
                                "    response = config.put_evaluations(", 
                                "       Evaluations=[", 
                                "           {", 
                                "               'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],", 
                                "               'ComplianceResourceId': vpc_id,", 
                                "               'ComplianceType': compliance_value,", 
                                "               'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']", 
                                "           },", 
                                "       ],", 
                                "       ResultToken=event['resultToken'])", 
                                "       "
                            ]
                        ]
                    }
                }, 
                "Timeout": 300
            }, 
            "DependsOn": "LambdaIamRolevxNTr"
        }, 
        "LambdaIamRolevxNTr": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "RoleName": "IAMRoleForvpc_flow_logs_enabled", 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }, 
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }, 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess", 
                    "arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole", 
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ], 
                "Policies": []
            }
        }, 
        "CustomConfigRuleCTXTd": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "kms_cmk_rotation", 
                "Description": "A Config rule that ensures rotation for customer created CMKs is enabled.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::KMS::Key"
                    ]
                }, 
                "Source": {
                    "Owner": "CUSTOM_LAMBDA", 
                    "SourceIdentifier": {
                        "Fn::GetAtt": [
                            "LambdaFunctionCTXTd", 
                            "Arn"
                        ]
                    }, 
                    "SourceDetails": [
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "ScheduledNotification", 
                            "MaximumExecutionFrequency": "One_Hour"
                        }
                    ]
                }
            }, 
            "DependsOn": "LambdaInvokePermissionsCTXTd"
        }, 
        "LambdaInvokePermissionsCTXTd": {
            "Type": "AWS::Lambda::Permission", 
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunctionCTXTd", 
                        "Arn"
                    ]
                }, 
                "Action": "lambda:InvokeFunction", 
                "Principal": "config.amazonaws.com"
            }
        }, 
        "LambdaFunctionCTXTd": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "FunctionName": "LambdaForkms_cmk_rotation", 
                "Handler": "index.lambda_handler", 
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIamRoleCTXTd", 
                        "Arn"
                    ]
                }, 
                "Runtime": "python2.7", 
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n", 
                            [
                                "", 
                                "import boto3", 
                                "import json", 
                                "import datetime", 
                                "def getKeyAlias(keyAliases, keyId):", 
                                "  for key in keyAliases:", 
                                "    if 'TargetKeyId' in key and key['AliasName'].startswith('alias/aws'):", 
                                "      continue", 
                                "    if 'TargetKeyId' in key:", 
                                "      if key['TargetKeyId'] == keyId:", 
                                "        return key['AliasName']", 
                                "  return ''", 
                                "def lambda_handler(event, context):", 
                                "  is_compliant = True", 
                                "  result_token = 'No token found.'", 
                                "  annotation = ''", 
                                "  compliance_resource_type = 'N/A'", 
                                "  if 'resultToken' in event: result_token = event['resultToken']", 
                                "  evaluations = []", 
                                "  kms_client = boto3.client('kms')", 
                                "  config_client = boto3.client('config')", 
                                "  # Get a list of key aliases. This will be used to discard AWS managed keys from rotation consideration.", 
                                "  aws_managed_keys = []", 
                                "  keyAliases = kms_client.list_aliases()['Aliases']", 
                                "  for key in keyAliases:", 
                                "    if 'TargetKeyId' in key and key['AliasName'].startswith('alias/aws'):", 
                                "      aws_managed_keys.append(key['TargetKeyId'])", 
                                "  for key in kms_client.list_keys()['Keys']:", 
                                "    # Do not evaluate AWS-managed keys.", 
                                "    if not key['KeyId'] in aws_managed_keys:", 
                                "      try:", 
                                "        is_compliant = kms_client.get_key_rotation_status(KeyId = key['KeyId'])['KeyRotationEnabled']", 
                                "      except:", 
                                "        is_compliant = True", 
                                "      keyIdentifier = ''", 
                                "      kIdentifier1 =  getKeyAlias(keyAliases, key['KeyId'])", 
                                "      if kIdentifier1 == '' :", 
                                "        keyIdentifier = ' KeyId = ' + key['KeyId']", 
                                "      else:", 
                                "        keyIdentifier = ' Key Alias = ' + kIdentifier1", 
                                "      if is_compliant: annotation = 'Key rotation is enabled for the specified CMK.' +  keyIdentifier", 
                                "      else: annotation = 'Key rotation is not enabled for the specified CMK.' + keyIdentifier", 
                                "      evaluations.append(", 
                                "        {", 
                                "          'ComplianceResourceType': 'AWS::KMS::Key',", 
                                "          'ComplianceResourceId': key['KeyId'],", 
                                "          'ComplianceType': 'COMPLIANT' if is_compliant else 'NON_COMPLIANT',", 
                                "          'Annotation': annotation,", 
                                "          'OrderingTimestamp': datetime.datetime.now()", 
                                "        }", 
                                "      )", 
                                "  response = config_client.put_evaluations(", 
                                "    Evaluations = evaluations,", 
                                "    ResultToken = event['resultToken']", 
                                "  )", 
                                ""
                            ]
                        ]
                    }
                }, 
                "Timeout": 300
            }, 
            "DependsOn": "LambdaIamRoleCTXTd"
        }, 
        "LambdaIamRoleCTXTd": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "RoleName": "IAMRoleForkms_cmk_rotation", 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }, 
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }, 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/ReadOnlyAccess", 
                    "arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole", 
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ], 
                "Policies": []
            }
        }, 
        "ConfigRulecrNUM": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "guardduty-enabled-centralized", 
                "Description": "A Config rule that checks whether Amazon GuardDuty is enabled in your AWS account and region. If you provide an AWS account for centralization, the rule evaluates the Amazon GuardDuty results in the centralized account. The rule is compliant when Amazon G", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": []
                }, 
                "Source": {
                    "Owner": "AWS", 
                    "SourceIdentifier": "GUARDDUTY_ENABLED_CENTRALIZED"
                }, 
                "MaximumExecutionFrequency": "TwentyFour_Hours"
            }
        }, 
        "ConfigRuleCzZxe": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "rds-storage-encrypted", 
                "Description": "A Config rule that checks whether storage encryption is enabled for your RDS DB instances.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::RDS::DBInstance"
                    ]
                }, 
                "Source": {
                    "Owner": "AWS", 
                    "SourceIdentifier": "RDS_STORAGE_ENCRYPTED"
                }
            }
        }, 
        "CustomConfigRuleslxsX": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "rds_vpc_public_subnet", 
                "Description": "A Config rule that checks that no RDS Instances are in Public Subnet.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::RDS::DBInstance"
                    ]
                }, 
                "Source": {
                    "Owner": "CUSTOM_LAMBDA", 
                    "SourceIdentifier": {
                        "Fn::GetAtt": [
                            "LambdaFunctionslxsX", 
                            "Arn"
                        ]
                    }, 
                    "SourceDetails": [
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "ConfigurationItemChangeNotification"
                        }, 
                        {
                            "EventSource": "aws.config", 
                            "MessageType": "OversizedConfigurationItemChangeNotification"
                        }
                    ]
                }
            }, 
            "DependsOn": "LambdaInvokePermissionsslxsX"
        }, 
        "LambdaInvokePermissionsslxsX": {
            "Type": "AWS::Lambda::Permission", 
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunctionslxsX", 
                        "Arn"
                    ]
                }, 
                "Action": "lambda:InvokeFunction", 
                "Principal": "config.amazonaws.com"
            }
        }, 
        "LambdaFunctionslxsX": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "FunctionName": "LambdaForrds_vpc_public_subnet", 
                "Handler": "index.lambda_handler", 
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIamRoleslxsX", 
                        "Arn"
                    ]
                }, 
                "Runtime": "python3.6", 
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n", 
                            [
                                "", 
                                "#", 
                                "# This file made available under CC0 1.0 Universal (https://creativecommons.org/publicdomain/zero/1.0/legalcode)", 
                                "#", 
                                "# Description: Check that no RDS Instances are in Public Subnet", 
                                "#", 
                                "# Trigger Type: Change Triggered", 
                                "# Scope of Changes: RDS:DBInstance", 
                                "# Accepted Parameters: None", 
                                "", 
                                "", 
                                "import boto3", 
                                "import botocore", 
                                "import json", 
                                "import logging", 
                                "", 
                                "log = logging.getLogger()", 
                                "log.setLevel(logging.INFO)", 
                                "", 
                                "def evaluate_compliance(configuration_item):", 
                                "    vpc_id      = configuration_item[\"configuration\"]['dBSubnetGroup'][\"vpcId\"]", 
                                "    subnet_ids   = []", 
                                "    for i in configuration_item[\"configuration\"]['dBSubnetGroup']['subnets']:", 
                                "        subnet_ids.append(i['subnetIdentifier'])", 
                                "    client      = boto3.client(\"ec2\");", 
                                "", 
                                "    response    = client.describe_route_tables()", 
                                "", 
                                "    # If the subnet is explicitly associated to a route table, check if there", 
                                "    # is a public route. If no explicit association exists, check if the main", 
                                "    # route table has a public route.", 
                                "", 
                                "    private = True", 
                                "", 
                                "    for subnet_id in subnet_ids:", 
                                "        mainTableIsPublic = False", 
                                "        noExplicitAssociationFound = True", 
                                "        explicitAssocationIsPublic = False", 
                                "        for i in response['RouteTables']:", 
                                "            if i['VpcId'] == vpc_id:", 
                                "                for j in i['Associations']:", 
                                "                    if j['Main'] == True:", 
                                "                        for k in i['Routes']:", 
                                "                            if k['DestinationCidrBlock'] == '0.0.0.0/0' or k['GatewayId'].startswith('igw-'):", 
                                "                                mainTableIsPublic = True", 
                                "                    else:", 
                                "                        if j['SubnetId'] == subnet_id:", 
                                "                            noExplicitAssociationFound = False", 
                                "                            for k in i['Routes']:", 
                                "                                if k['DestinationCidrBlock'] == '0.0.0.0/0' or k['GatewayId'].startswith('igw-'):", 
                                "                                    explicitAssocationIsPublic = True", 
                                "", 
                                "        if (mainTableIsPublic and noExplicitAssociationFound) or explicitAssocationIsPublic:", 
                                "            private = False", 
                                "", 
                                "    if private:", 
                                "        return {", 
                                "            \"compliance_type\": \"COMPLIANT\",", 
                                "            \"annotation\": 'Its in private subnet'", 
                                "        }", 
                                "    else:", 
                                "        return {", 
                                "            \"compliance_type\" : \"NON_COMPLIANT\",", 
                                "            \"annotation\" : 'Not in private subnet'", 
                                "        }", 
                                "", 
                                "def lambda_handler(event, context):", 
                                "    log.debug('Event %s', event)", 
                                "    invoking_event      = json.loads(event['invokingEvent'])", 
                                "    configuration_item  = invoking_event[\"configurationItem\"]", 
                                "    evaluation          = evaluate_compliance(configuration_item)", 
                                "    config              = boto3.client('config')", 
                                "", 
                                "    response = config.put_evaluations(", 
                                "       Evaluations=[", 
                                "           {", 
                                "               'ComplianceResourceType':    invoking_event['configurationItem']['resourceType'],", 
                                "               'ComplianceResourceId':      invoking_event['configurationItem']['resourceId'],", 
                                "               'ComplianceType':            evaluation[\"compliance_type\"],", 
                                "               \"Annotation\":                evaluation[\"annotation\"],", 
                                "               'OrderingTimestamp':         invoking_event['configurationItem']['configurationItemCaptureTime']", 
                                "           },", 
                                "       ],", 
                                "       ResultToken=event['resultToken'])", 
                                ""
                            ]
                        ]
                    }
                }, 
                "Timeout": 300
            }, 
            "DependsOn": "LambdaIamRoleslxsX"
        }, 
        "LambdaIamRoleslxsX": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "RoleName": "IAMRoleForrds_vpc_public_subnet", 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }, 
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }, 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess", 
                    "arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole", 
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ], 
                "Policies": []
            }
        }, 
        "ConfigRuleNWqFM": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "rds-snapshots-public-prohibited", 
                "Description": "A Config rule that checks if Amazon Relational Database Service (Amazon RDS) snapshots are public. The rule is non-compliant if any existing and new Amazon RDS snapshots are public.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::RDS::DBSnapshot"
                    ]
                }, 
                "Source": {
                    "Owner": "AWS", 
                    "SourceIdentifier": "RDS_SNAPSHOTS_PUBLIC_PROHIBITED"
                }
            }
        }, 
        "ConfigRuleeiBOJ": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "encrypted-volumes", 
                "Description": "A Config rule that checks whether the EBS volumes that are in an attached state are encrypted. If you specify the ID of a KMS key for encryption using the kmsId parameter, the rule checks if the EBS volumes in an attached state are encrypted with that KMS", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::EC2:Volume"
                    ]
                }, 
                "Source": {
                    "Owner": "AWS", 
                    "SourceIdentifier": "ENCRYPTED_VOLUMES"
                }
            }
        }, 
        "ConfigRulebCCiy": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "ec2-managedinstance-association-compliance-status-check", 
                "Description": "A Config rule that checks whether the compliance status of the Amazon EC2 Systems Manager association compliance is COMPLIANT or NON_COMPLIANT after the association execution on the instance. The rule is compliant if the field status is COMPLIANT.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::SSM::AssociationCompliance"
                    ]
                }, 
                "Source": {
                    "Owner": "AWS", 
                    "SourceIdentifier": "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK"
                }
            }
        }, 
        "ConfigRuleqOdmJ": {
            "Type": "AWS::Config::ConfigRule", 
            "Properties": {
                "ConfigRuleName": "ec2-managedinstance-patch-compliance-status-check", 
                "Description": "A Config rule that checks whether the compliance status of the Amazon EC2 Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. The rule is compliant if the field status is COMPLIANT.", 
                "InputParameters": {}, 
                "Scope": {
                    "ComplianceResourceTypes": [
                        "AWS::SSM::PatchCompliance"
                    ]
                }, 
                "Source": {
                    "Owner": "AWS", 
                    "SourceIdentifier": "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK"
                }
            }
        }
    }, 
    "Parameters": {}, 
    "Metadata": {}, 
    "Conditions": {}
}