//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.02.25 at 12:05:09 AM CET 
//


package com.hack23.cia.model.internal.application.data.committee.impl;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.hack23.cia.model.common.api.ModelObject;
import com.hack23.cia.model.common.impl.xml.XmlDateTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ViewRiksdagenCommittee complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ViewRiksdagenCommittee"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="embeddedId" type="{http://committee.data.application.internal.model.cia.hack23.com/impl}RiksdagenCommitteeEmbeddedId"/&gt;
 *         &lt;element name="totalAssignments" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *         &lt;element name="firstAssignmentDate" type="{http://www.w3.org/2001/XMLSchema}date"/&gt;
 *         &lt;element name="lastAssignmentDate" type="{http://www.w3.org/2001/XMLSchema}date"/&gt;
 *         &lt;element name="totalDaysServed" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *         &lt;element name="currentMemberSize" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *         &lt;element name="active" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ViewRiksdagenCommittee", propOrder = {
    "embeddedId",
    "totalAssignments",
    "firstAssignmentDate",
    "lastAssignmentDate",
    "totalDaysServed",
    "currentMemberSize",
    "active"
})
@Entity(name = "ViewRiksdagenCommittee")
@Table(name = "VIEW_RIKSDAGEN_COMMITTEE")
@Inheritance(strategy = InheritanceType.JOINED)
public class ViewRiksdagenCommittee
    implements Serializable, ModelObject, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected RiksdagenCommitteeEmbeddedId embeddedId;
    protected long totalAssignments;
    @XmlElement(required = true, type = String.class)
    @XmlJavaTypeAdapter(XmlDateTypeAdapter.class)
    @XmlSchemaType(name = "date")
    protected Date firstAssignmentDate;
    @XmlElement(required = true, type = String.class)
    @XmlJavaTypeAdapter(XmlDateTypeAdapter.class)
    @XmlSchemaType(name = "date")
    protected Date lastAssignmentDate;
    protected long totalDaysServed;
    protected long currentMemberSize;
    protected boolean active;

    /**
     * Gets the value of the embeddedId property.
     * 
     * @return
     *     possible object is
     *     {@link RiksdagenCommitteeEmbeddedId }
     *     
     */
    @EmbeddedId
    @AttributeOverrides({
        @AttributeOverride(name = "detail", column = @Column(name = "EMBEDDED_ID_DETAIL", length = 255)),
        @AttributeOverride(name = "orgCode", column = @Column(name = "EMBEDDED_ID_ORG_CODE", length = 255))
    })
    public RiksdagenCommitteeEmbeddedId getEmbeddedId() {
        return embeddedId;
    }

    /**
     * Sets the value of the embeddedId property.
     * 
     * @param value
     *     allowed object is
     *     {@link RiksdagenCommitteeEmbeddedId }
     *     
     */
    public void setEmbeddedId(RiksdagenCommitteeEmbeddedId value) {
        this.embeddedId = value;
    }

    /**
     * Gets the value of the totalAssignments property.
     * 
     */
    @Basic
    @Column(name = "TOTAL_ASSIGNMENTS", precision = 20, scale = 0)
    public long getTotalAssignments() {
        return totalAssignments;
    }

    /**
     * Sets the value of the totalAssignments property.
     * 
     */
    public void setTotalAssignments(long value) {
        this.totalAssignments = value;
    }

    /**
     * Gets the value of the firstAssignmentDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "FIRST_ASSIGNMENT_DATE")
    @Temporal(TemporalType.DATE)
    public Date getFirstAssignmentDate() {
        return firstAssignmentDate;
    }

    /**
     * Sets the value of the firstAssignmentDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFirstAssignmentDate(Date value) {
        this.firstAssignmentDate = value;
    }

    /**
     * Gets the value of the lastAssignmentDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "LAST_ASSIGNMENT_DATE")
    @Temporal(TemporalType.DATE)
    public Date getLastAssignmentDate() {
        return lastAssignmentDate;
    }

    /**
     * Sets the value of the lastAssignmentDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLastAssignmentDate(Date value) {
        this.lastAssignmentDate = value;
    }

    /**
     * Gets the value of the totalDaysServed property.
     * 
     */
    @Basic
    @Column(name = "TOTAL_DAYS_SERVED", precision = 20, scale = 0)
    public long getTotalDaysServed() {
        return totalDaysServed;
    }

    /**
     * Sets the value of the totalDaysServed property.
     * 
     */
    public void setTotalDaysServed(long value) {
        this.totalDaysServed = value;
    }

    /**
     * Gets the value of the currentMemberSize property.
     * 
     */
    @Basic
    @Column(name = "CURRENT_MEMBER_SIZE", precision = 20, scale = 0)
    public long getCurrentMemberSize() {
        return currentMemberSize;
    }

    /**
     * Sets the value of the currentMemberSize property.
     * 
     */
    public void setCurrentMemberSize(long value) {
        this.currentMemberSize = value;
    }

    /**
     * Gets the value of the active property.
     * 
     */
    @Basic
    @Column(name = "ACTIVE")
    public boolean isActive() {
        return active;
    }

    /**
     * Sets the value of the active property.
     * 
     */
    public void setActive(boolean value) {
        this.active = value;
    }

    public ViewRiksdagenCommittee withEmbeddedId(RiksdagenCommitteeEmbeddedId value) {
        setEmbeddedId(value);
        return this;
    }

    public ViewRiksdagenCommittee withTotalAssignments(long value) {
        setTotalAssignments(value);
        return this;
    }

    public ViewRiksdagenCommittee withFirstAssignmentDate(Date value) {
        setFirstAssignmentDate(value);
        return this;
    }

    public ViewRiksdagenCommittee withLastAssignmentDate(Date value) {
        setLastAssignmentDate(value);
        return this;
    }

    public ViewRiksdagenCommittee withTotalDaysServed(long value) {
        setTotalDaysServed(value);
        return this;
    }

    public ViewRiksdagenCommittee withCurrentMemberSize(long value) {
        setCurrentMemberSize(value);
        return this;
    }

    public ViewRiksdagenCommittee withActive(boolean value) {
        setActive(value);
        return this;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            RiksdagenCommitteeEmbeddedId theEmbeddedId;
            theEmbeddedId = this.getEmbeddedId();
            strategy.appendField(locator, this, "embeddedId", buffer, theEmbeddedId);
        }
        {
            long theTotalAssignments;
            theTotalAssignments = this.getTotalAssignments();
            strategy.appendField(locator, this, "totalAssignments", buffer, theTotalAssignments);
        }
        {
            Date theFirstAssignmentDate;
            theFirstAssignmentDate = this.getFirstAssignmentDate();
            strategy.appendField(locator, this, "firstAssignmentDate", buffer, theFirstAssignmentDate);
        }
        {
            Date theLastAssignmentDate;
            theLastAssignmentDate = this.getLastAssignmentDate();
            strategy.appendField(locator, this, "lastAssignmentDate", buffer, theLastAssignmentDate);
        }
        {
            long theTotalDaysServed;
            theTotalDaysServed = this.getTotalDaysServed();
            strategy.appendField(locator, this, "totalDaysServed", buffer, theTotalDaysServed);
        }
        {
            long theCurrentMemberSize;
            theCurrentMemberSize = this.getCurrentMemberSize();
            strategy.appendField(locator, this, "currentMemberSize", buffer, theCurrentMemberSize);
        }
        {
            boolean theActive;
            theActive = this.isActive();
            strategy.appendField(locator, this, "active", buffer, theActive);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ViewRiksdagenCommittee that = ((ViewRiksdagenCommittee) object);
        {
            RiksdagenCommitteeEmbeddedId lhsEmbeddedId;
            lhsEmbeddedId = this.getEmbeddedId();
            RiksdagenCommitteeEmbeddedId rhsEmbeddedId;
            rhsEmbeddedId = that.getEmbeddedId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "embeddedId", lhsEmbeddedId), LocatorUtils.property(thatLocator, "embeddedId", rhsEmbeddedId), lhsEmbeddedId, rhsEmbeddedId)) {
                return false;
            }
        }
        {
            long lhsTotalAssignments;
            lhsTotalAssignments = this.getTotalAssignments();
            long rhsTotalAssignments;
            rhsTotalAssignments = that.getTotalAssignments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalAssignments", lhsTotalAssignments), LocatorUtils.property(thatLocator, "totalAssignments", rhsTotalAssignments), lhsTotalAssignments, rhsTotalAssignments)) {
                return false;
            }
        }
        {
            Date lhsFirstAssignmentDate;
            lhsFirstAssignmentDate = this.getFirstAssignmentDate();
            Date rhsFirstAssignmentDate;
            rhsFirstAssignmentDate = that.getFirstAssignmentDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "firstAssignmentDate", lhsFirstAssignmentDate), LocatorUtils.property(thatLocator, "firstAssignmentDate", rhsFirstAssignmentDate), lhsFirstAssignmentDate, rhsFirstAssignmentDate)) {
                return false;
            }
        }
        {
            Date lhsLastAssignmentDate;
            lhsLastAssignmentDate = this.getLastAssignmentDate();
            Date rhsLastAssignmentDate;
            rhsLastAssignmentDate = that.getLastAssignmentDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastAssignmentDate", lhsLastAssignmentDate), LocatorUtils.property(thatLocator, "lastAssignmentDate", rhsLastAssignmentDate), lhsLastAssignmentDate, rhsLastAssignmentDate)) {
                return false;
            }
        }
        {
            long lhsTotalDaysServed;
            lhsTotalDaysServed = this.getTotalDaysServed();
            long rhsTotalDaysServed;
            rhsTotalDaysServed = that.getTotalDaysServed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalDaysServed", lhsTotalDaysServed), LocatorUtils.property(thatLocator, "totalDaysServed", rhsTotalDaysServed), lhsTotalDaysServed, rhsTotalDaysServed)) {
                return false;
            }
        }
        {
            long lhsCurrentMemberSize;
            lhsCurrentMemberSize = this.getCurrentMemberSize();
            long rhsCurrentMemberSize;
            rhsCurrentMemberSize = that.getCurrentMemberSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentMemberSize", lhsCurrentMemberSize), LocatorUtils.property(thatLocator, "currentMemberSize", rhsCurrentMemberSize), lhsCurrentMemberSize, rhsCurrentMemberSize)) {
                return false;
            }
        }
        {
            boolean lhsActive;
            lhsActive = this.isActive();
            boolean rhsActive;
            rhsActive = that.isActive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "active", lhsActive), LocatorUtils.property(thatLocator, "active", rhsActive), lhsActive, rhsActive)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            RiksdagenCommitteeEmbeddedId theEmbeddedId;
            theEmbeddedId = this.getEmbeddedId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "embeddedId", theEmbeddedId), currentHashCode, theEmbeddedId);
        }
        {
            long theTotalAssignments;
            theTotalAssignments = this.getTotalAssignments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalAssignments", theTotalAssignments), currentHashCode, theTotalAssignments);
        }
        {
            Date theFirstAssignmentDate;
            theFirstAssignmentDate = this.getFirstAssignmentDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "firstAssignmentDate", theFirstAssignmentDate), currentHashCode, theFirstAssignmentDate);
        }
        {
            Date theLastAssignmentDate;
            theLastAssignmentDate = this.getLastAssignmentDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastAssignmentDate", theLastAssignmentDate), currentHashCode, theLastAssignmentDate);
        }
        {
            long theTotalDaysServed;
            theTotalDaysServed = this.getTotalDaysServed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalDaysServed", theTotalDaysServed), currentHashCode, theTotalDaysServed);
        }
        {
            long theCurrentMemberSize;
            theCurrentMemberSize = this.getCurrentMemberSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentMemberSize", theCurrentMemberSize), currentHashCode, theCurrentMemberSize);
        }
        {
            boolean theActive;
            theActive = this.isActive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "active", theActive), currentHashCode, theActive);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
