//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.02.25 at 12:05:09 AM CET 
//


package com.hack23.cia.model.internal.application.system.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.hack23.cia.model.common.api.ModelObject;
import com.hack23.cia.model.common.impl.xml.XmlDateTimeTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ApplicationSession complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ApplicationSession"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="modelObjectId" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
 *         &lt;element name="modelObjectVersion" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="createdDate" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/&gt;
 *         &lt;element name="destroyedDate" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/&gt;
 *         &lt;element name="ipInformation" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="userAgentInformation" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="sessionId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="userId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="locale" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="operatingSystem" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="screenSize" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="timeZone" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="sessionType" type="{http://system.application.internal.model.cia.hack23.com/impl}ApplicationSessionType" minOccurs="0"/&gt;
 *         &lt;element name="events" type="{http://system.application.internal.model.cia.hack23.com/impl}ApplicationActionEvent" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ApplicationSession", propOrder = {
    "modelObjectId",
    "modelObjectVersion",
    "createdDate",
    "destroyedDate",
    "ipInformation",
    "userAgentInformation",
    "sessionId",
    "userId",
    "locale",
    "operatingSystem",
    "screenSize",
    "timeZone",
    "sessionType",
    "events"
})
@Entity(name = "ApplicationSession")
@Table(name = "APPLICATION_SESSION")
@Inheritance(strategy = InheritanceType.JOINED)
public class ApplicationSession
    implements Serializable, ModelObject, Equals, HashCode, ToString
{

    protected Integer modelObjectId;
    protected int modelObjectVersion;
    @XmlElement(type = String.class)
    @XmlJavaTypeAdapter(XmlDateTimeTypeAdapter.class)
    @XmlSchemaType(name = "dateTime")
    protected Date createdDate;
    @XmlElement(type = String.class)
    @XmlJavaTypeAdapter(XmlDateTimeTypeAdapter.class)
    @XmlSchemaType(name = "dateTime")
    protected Date destroyedDate;
    protected String ipInformation;
    protected String userAgentInformation;
    protected String sessionId;
    protected String userId;
    protected String locale;
    protected String operatingSystem;
    protected String screenSize;
    protected String timeZone;
    @XmlSchemaType(name = "string")
    protected ApplicationSessionType sessionType;
    @XmlElement(nillable = true)
    protected List<ApplicationActionEvent> events;
    @XmlAttribute(name = "Hjid")
    protected Long hjid;

    /**
     * Gets the value of the modelObjectId property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @Basic
    @Column(name = "MODEL_OBJECT_ID", precision = 10, scale = 0)
    public Integer getModelObjectId() {
        return modelObjectId;
    }

    /**
     * Sets the value of the modelObjectId property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setModelObjectId(Integer value) {
        this.modelObjectId = value;
    }

    /**
     * Gets the value of the modelObjectVersion property.
     * 
     */
    @Version
    @Column(name = "MODEL_OBJECT_VERSION")
    public int getModelObjectVersion() {
        return modelObjectVersion;
    }

    /**
     * Sets the value of the modelObjectVersion property.
     * 
     */
    public void setModelObjectVersion(int value) {
        this.modelObjectVersion = value;
    }

    /**
     * Gets the value of the createdDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CREATED_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the value of the createdDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedDate(Date value) {
        this.createdDate = value;
    }

    /**
     * Gets the value of the destroyedDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "DESTROYED_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getDestroyedDate() {
        return destroyedDate;
    }

    /**
     * Sets the value of the destroyedDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDestroyedDate(Date value) {
        this.destroyedDate = value;
    }

    /**
     * Gets the value of the ipInformation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "IP_INFORMATION", length = 255)
    public String getIpInformation() {
        return ipInformation;
    }

    /**
     * Sets the value of the ipInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIpInformation(String value) {
        this.ipInformation = value;
    }

    /**
     * Gets the value of the userAgentInformation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "USER_AGENT_INFORMATION", length = 255)
    public String getUserAgentInformation() {
        return userAgentInformation;
    }

    /**
     * Sets the value of the userAgentInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUserAgentInformation(String value) {
        this.userAgentInformation = value;
    }

    /**
     * Gets the value of the sessionId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SESSION_ID", length = 255)
    public String getSessionId() {
        return sessionId;
    }

    /**
     * Sets the value of the sessionId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSessionId(String value) {
        this.sessionId = value;
    }

    /**
     * Gets the value of the userId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "USER_ID", length = 255)
    public String getUserId() {
        return userId;
    }

    /**
     * Sets the value of the userId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUserId(String value) {
        this.userId = value;
    }

    /**
     * Gets the value of the locale property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "LOCALE", length = 255)
    public String getLocale() {
        return locale;
    }

    /**
     * Sets the value of the locale property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLocale(String value) {
        this.locale = value;
    }

    /**
     * Gets the value of the operatingSystem property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "OPERATING_SYSTEM", length = 255)
    public String getOperatingSystem() {
        return operatingSystem;
    }

    /**
     * Sets the value of the operatingSystem property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOperatingSystem(String value) {
        this.operatingSystem = value;
    }

    /**
     * Gets the value of the screenSize property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SCREEN_SIZE", length = 255)
    public String getScreenSize() {
        return screenSize;
    }

    /**
     * Sets the value of the screenSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setScreenSize(String value) {
        this.screenSize = value;
    }

    /**
     * Gets the value of the timeZone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "TIME_ZONE", length = 255)
    public String getTimeZone() {
        return timeZone;
    }

    /**
     * Sets the value of the timeZone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTimeZone(String value) {
        this.timeZone = value;
    }

    /**
     * Gets the value of the sessionType property.
     * 
     * @return
     *     possible object is
     *     {@link ApplicationSessionType }
     *     
     */
    @Basic
    @Column(name = "SESSION_TYPE", length = 255)
    @Enumerated(EnumType.STRING)
    public ApplicationSessionType getSessionType() {
        return sessionType;
    }

    /**
     * Sets the value of the sessionType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ApplicationSessionType }
     *     
     */
    public void setSessionType(ApplicationSessionType value) {
        this.sessionType = value;
    }

    /**
     * Gets the value of the events property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the events property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEvents().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ApplicationActionEvent }
     * 
     * 
     */
    @OneToMany(targetEntity = ApplicationActionEvent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENTS_APPLICATION_SESSION_H_0")
    public List<ApplicationActionEvent> getEvents() {
        if (events == null) {
            events = new ArrayList<ApplicationActionEvent>();
        }
        return this.events;
    }

    /**
     * 
     * 
     */
    public void setEvents(List<ApplicationActionEvent> events) {
        this.events = events;
    }

    public ApplicationSession withModelObjectId(Integer value) {
        setModelObjectId(value);
        return this;
    }

    public ApplicationSession withModelObjectVersion(int value) {
        setModelObjectVersion(value);
        return this;
    }

    public ApplicationSession withCreatedDate(Date value) {
        setCreatedDate(value);
        return this;
    }

    public ApplicationSession withDestroyedDate(Date value) {
        setDestroyedDate(value);
        return this;
    }

    public ApplicationSession withIpInformation(String value) {
        setIpInformation(value);
        return this;
    }

    public ApplicationSession withUserAgentInformation(String value) {
        setUserAgentInformation(value);
        return this;
    }

    public ApplicationSession withSessionId(String value) {
        setSessionId(value);
        return this;
    }

    public ApplicationSession withUserId(String value) {
        setUserId(value);
        return this;
    }

    public ApplicationSession withLocale(String value) {
        setLocale(value);
        return this;
    }

    public ApplicationSession withOperatingSystem(String value) {
        setOperatingSystem(value);
        return this;
    }

    public ApplicationSession withScreenSize(String value) {
        setScreenSize(value);
        return this;
    }

    public ApplicationSession withTimeZone(String value) {
        setTimeZone(value);
        return this;
    }

    public ApplicationSession withSessionType(ApplicationSessionType value) {
        setSessionType(value);
        return this;
    }

    public ApplicationSession withEvents(ApplicationActionEvent... values) {
        if (values!= null) {
            for (ApplicationActionEvent value: values) {
                getEvents().add(value);
            }
        }
        return this;
    }

    public ApplicationSession withEvents(Collection<ApplicationActionEvent> values) {
        if (values!= null) {
            getEvents().addAll(values);
        }
        return this;
    }

    public ApplicationSession withEvents(List<ApplicationActionEvent> events) {
        setEvents(events);
        return this;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Integer theModelObjectId;
            theModelObjectId = this.getModelObjectId();
            strategy.appendField(locator, this, "modelObjectId", buffer, theModelObjectId);
        }
        {
            int theModelObjectVersion;
            theModelObjectVersion = this.getModelObjectVersion();
            strategy.appendField(locator, this, "modelObjectVersion", buffer, theModelObjectVersion);
        }
        {
            Date theCreatedDate;
            theCreatedDate = this.getCreatedDate();
            strategy.appendField(locator, this, "createdDate", buffer, theCreatedDate);
        }
        {
            Date theDestroyedDate;
            theDestroyedDate = this.getDestroyedDate();
            strategy.appendField(locator, this, "destroyedDate", buffer, theDestroyedDate);
        }
        {
            String theIpInformation;
            theIpInformation = this.getIpInformation();
            strategy.appendField(locator, this, "ipInformation", buffer, theIpInformation);
        }
        {
            String theUserAgentInformation;
            theUserAgentInformation = this.getUserAgentInformation();
            strategy.appendField(locator, this, "userAgentInformation", buffer, theUserAgentInformation);
        }
        {
            String theSessionId;
            theSessionId = this.getSessionId();
            strategy.appendField(locator, this, "sessionId", buffer, theSessionId);
        }
        {
            String theUserId;
            theUserId = this.getUserId();
            strategy.appendField(locator, this, "userId", buffer, theUserId);
        }
        {
            String theLocale;
            theLocale = this.getLocale();
            strategy.appendField(locator, this, "locale", buffer, theLocale);
        }
        {
            String theOperatingSystem;
            theOperatingSystem = this.getOperatingSystem();
            strategy.appendField(locator, this, "operatingSystem", buffer, theOperatingSystem);
        }
        {
            String theScreenSize;
            theScreenSize = this.getScreenSize();
            strategy.appendField(locator, this, "screenSize", buffer, theScreenSize);
        }
        {
            String theTimeZone;
            theTimeZone = this.getTimeZone();
            strategy.appendField(locator, this, "timeZone", buffer, theTimeZone);
        }
        {
            ApplicationSessionType theSessionType;
            theSessionType = this.getSessionType();
            strategy.appendField(locator, this, "sessionType", buffer, theSessionType);
        }
        {
            List<ApplicationActionEvent> theEvents;
            theEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            strategy.appendField(locator, this, "events", buffer, theEvents);
        }
        return buffer;
    }

    /**
     * Gets the value of the hjid property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Id
    @Column(name = "HJID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getHjid() {
        return hjid;
    }

    /**
     * Sets the value of the hjid property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setHjid(Long value) {
        this.hjid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ApplicationSession that = ((ApplicationSession) object);
        {
            Integer lhsModelObjectId;
            lhsModelObjectId = this.getModelObjectId();
            Integer rhsModelObjectId;
            rhsModelObjectId = that.getModelObjectId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modelObjectId", lhsModelObjectId), LocatorUtils.property(thatLocator, "modelObjectId", rhsModelObjectId), lhsModelObjectId, rhsModelObjectId)) {
                return false;
            }
        }
        {
            int lhsModelObjectVersion;
            lhsModelObjectVersion = this.getModelObjectVersion();
            int rhsModelObjectVersion;
            rhsModelObjectVersion = that.getModelObjectVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modelObjectVersion", lhsModelObjectVersion), LocatorUtils.property(thatLocator, "modelObjectVersion", rhsModelObjectVersion), lhsModelObjectVersion, rhsModelObjectVersion)) {
                return false;
            }
        }
        {
            Date lhsCreatedDate;
            lhsCreatedDate = this.getCreatedDate();
            Date rhsCreatedDate;
            rhsCreatedDate = that.getCreatedDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdDate", lhsCreatedDate), LocatorUtils.property(thatLocator, "createdDate", rhsCreatedDate), lhsCreatedDate, rhsCreatedDate)) {
                return false;
            }
        }
        {
            Date lhsDestroyedDate;
            lhsDestroyedDate = this.getDestroyedDate();
            Date rhsDestroyedDate;
            rhsDestroyedDate = that.getDestroyedDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "destroyedDate", lhsDestroyedDate), LocatorUtils.property(thatLocator, "destroyedDate", rhsDestroyedDate), lhsDestroyedDate, rhsDestroyedDate)) {
                return false;
            }
        }
        {
            String lhsIpInformation;
            lhsIpInformation = this.getIpInformation();
            String rhsIpInformation;
            rhsIpInformation = that.getIpInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ipInformation", lhsIpInformation), LocatorUtils.property(thatLocator, "ipInformation", rhsIpInformation), lhsIpInformation, rhsIpInformation)) {
                return false;
            }
        }
        {
            String lhsUserAgentInformation;
            lhsUserAgentInformation = this.getUserAgentInformation();
            String rhsUserAgentInformation;
            rhsUserAgentInformation = that.getUserAgentInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userAgentInformation", lhsUserAgentInformation), LocatorUtils.property(thatLocator, "userAgentInformation", rhsUserAgentInformation), lhsUserAgentInformation, rhsUserAgentInformation)) {
                return false;
            }
        }
        {
            String lhsSessionId;
            lhsSessionId = this.getSessionId();
            String rhsSessionId;
            rhsSessionId = that.getSessionId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sessionId", lhsSessionId), LocatorUtils.property(thatLocator, "sessionId", rhsSessionId), lhsSessionId, rhsSessionId)) {
                return false;
            }
        }
        {
            String lhsUserId;
            lhsUserId = this.getUserId();
            String rhsUserId;
            rhsUserId = that.getUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userId", lhsUserId), LocatorUtils.property(thatLocator, "userId", rhsUserId), lhsUserId, rhsUserId)) {
                return false;
            }
        }
        {
            String lhsLocale;
            lhsLocale = this.getLocale();
            String rhsLocale;
            rhsLocale = that.getLocale();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locale", lhsLocale), LocatorUtils.property(thatLocator, "locale", rhsLocale), lhsLocale, rhsLocale)) {
                return false;
            }
        }
        {
            String lhsOperatingSystem;
            lhsOperatingSystem = this.getOperatingSystem();
            String rhsOperatingSystem;
            rhsOperatingSystem = that.getOperatingSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operatingSystem", lhsOperatingSystem), LocatorUtils.property(thatLocator, "operatingSystem", rhsOperatingSystem), lhsOperatingSystem, rhsOperatingSystem)) {
                return false;
            }
        }
        {
            String lhsScreenSize;
            lhsScreenSize = this.getScreenSize();
            String rhsScreenSize;
            rhsScreenSize = that.getScreenSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "screenSize", lhsScreenSize), LocatorUtils.property(thatLocator, "screenSize", rhsScreenSize), lhsScreenSize, rhsScreenSize)) {
                return false;
            }
        }
        {
            String lhsTimeZone;
            lhsTimeZone = this.getTimeZone();
            String rhsTimeZone;
            rhsTimeZone = that.getTimeZone();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timeZone", lhsTimeZone), LocatorUtils.property(thatLocator, "timeZone", rhsTimeZone), lhsTimeZone, rhsTimeZone)) {
                return false;
            }
        }
        {
            ApplicationSessionType lhsSessionType;
            lhsSessionType = this.getSessionType();
            ApplicationSessionType rhsSessionType;
            rhsSessionType = that.getSessionType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sessionType", lhsSessionType), LocatorUtils.property(thatLocator, "sessionType", rhsSessionType), lhsSessionType, rhsSessionType)) {
                return false;
            }
        }
        {
            List<ApplicationActionEvent> lhsEvents;
            lhsEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            List<ApplicationActionEvent> rhsEvents;
            rhsEvents = (((that.events!= null)&&(!that.events.isEmpty()))?that.getEvents():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "events", lhsEvents), LocatorUtils.property(thatLocator, "events", rhsEvents), lhsEvents, rhsEvents)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Integer theModelObjectId;
            theModelObjectId = this.getModelObjectId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modelObjectId", theModelObjectId), currentHashCode, theModelObjectId);
        }
        {
            int theModelObjectVersion;
            theModelObjectVersion = this.getModelObjectVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modelObjectVersion", theModelObjectVersion), currentHashCode, theModelObjectVersion);
        }
        {
            Date theCreatedDate;
            theCreatedDate = this.getCreatedDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdDate", theCreatedDate), currentHashCode, theCreatedDate);
        }
        {
            Date theDestroyedDate;
            theDestroyedDate = this.getDestroyedDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destroyedDate", theDestroyedDate), currentHashCode, theDestroyedDate);
        }
        {
            String theIpInformation;
            theIpInformation = this.getIpInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ipInformation", theIpInformation), currentHashCode, theIpInformation);
        }
        {
            String theUserAgentInformation;
            theUserAgentInformation = this.getUserAgentInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userAgentInformation", theUserAgentInformation), currentHashCode, theUserAgentInformation);
        }
        {
            String theSessionId;
            theSessionId = this.getSessionId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sessionId", theSessionId), currentHashCode, theSessionId);
        }
        {
            String theUserId;
            theUserId = this.getUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userId", theUserId), currentHashCode, theUserId);
        }
        {
            String theLocale;
            theLocale = this.getLocale();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locale", theLocale), currentHashCode, theLocale);
        }
        {
            String theOperatingSystem;
            theOperatingSystem = this.getOperatingSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operatingSystem", theOperatingSystem), currentHashCode, theOperatingSystem);
        }
        {
            String theScreenSize;
            theScreenSize = this.getScreenSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "screenSize", theScreenSize), currentHashCode, theScreenSize);
        }
        {
            String theTimeZone;
            theTimeZone = this.getTimeZone();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timeZone", theTimeZone), currentHashCode, theTimeZone);
        }
        {
            ApplicationSessionType theSessionType;
            theSessionType = this.getSessionType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sessionType", theSessionType), currentHashCode, theSessionType);
        }
        {
            List<ApplicationActionEvent> theEvents;
            theEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "events", theEvents), currentHashCode, theEvents);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
